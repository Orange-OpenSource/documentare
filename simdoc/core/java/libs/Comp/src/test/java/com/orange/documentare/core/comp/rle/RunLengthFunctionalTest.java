package com.orange.documentare.core.comp.rle;
/*
 * Copyright (c) 2016 Orange
 *
 * Authors: Christophe Maldivi & Joel Gardes
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 */

import org.junit.Assert;
import org.junit.Test;

import java.util.List;

public class RunLengthFunctionalTest {

  private static final String INPUT_STRING_1 = "aaaabbcdeeeeefghhhij";
  private static final String INPUT_STRING_2 = "...mratttsea,ontademmtxogttdeepdumtrtrmetotedtststtiana,n,rr,dnitemntmtttram  . neilpulll  cm  il  pctiudtti aaaceoxin srm   e  eiuaoiin iao     isrrrtrt assr v rthv drcsxdsd   mt t  of nuaeuscngrf pocdcnnn    cmstud ll urupnsllrlcel   laaleeuuoioooouloiuuieiau aa osm eioioigieieeai   oouuiue ddc mm rmddddvcnicclplbllLbbnil uime iueie i uoououeuooopo aoeptoeiiiiisn nei  ueeop uiiaeUiniusnaanneinaapiua cpaseaeqqrfqqDqn cslrsrdcltetri  a   eEe";

  private static final byte[] ENCODED_BYTES_1 = { 4, 0, 0, 0, 97, 2, 0, 0, 0, 98, 1, 0, 0, 0, 99, 1, 0, 0, 0, 100, 5, 0, 0, 0, 101, 1, 0, 0, 0, 102, 1, 0, 0, 0, 103, 3, 0, 0, 0, 104, 1, 0, 0, 0, 105, 1, 0, 0, 0, 106 };
  private static final byte[] ENCODED_BYTES_2 = { 3, 0, 0, 0, 46, 1, 0, 0, 0, 109, 1, 0, 0, 0, 114, 1, 0, 0, 0, 97, 3, 0, 0, 0, 116, 1, 0, 0, 0, 115, 1, 0, 0, 0, 101, 1, 0, 0, 0, 97, 1, 0, 0, 0, 44, 1, 0, 0, 0, 111, 1, 0, 0, 0, 110, 1, 0, 0, 0, 116, 1, 0, 0, 0, 97, 1, 0, 0, 0, 100, 1, 0, 0, 0, 101, 2, 0, 0, 0, 109, 1, 0, 0, 0, 116, 1, 0, 0, 0, 120, 1, 0, 0, 0, 111, 1, 0, 0, 0, 103, 2, 0, 0, 0, 116, 1, 0, 0, 0, 100, 2, 0, 0, 0, 101, 1, 0, 0, 0, 112, 1, 0, 0, 0, 100, 1, 0, 0, 0, 117, 1, 0, 0, 0, 109, 1, 0, 0, 0, 116, 1, 0, 0, 0, 114, 1, 0, 0, 0, 116, 1, 0, 0, 0, 114, 1, 0, 0, 0, 109, 1, 0, 0, 0, 101, 1, 0, 0, 0, 116, 1, 0, 0, 0, 111, 1, 0, 0, 0, 116, 1, 0, 0, 0, 101, 1, 0, 0, 0, 100, 1, 0, 0, 0, 116, 1, 0, 0, 0, 115, 1, 0, 0, 0, 116, 1, 0, 0, 0, 115, 2, 0, 0, 0, 116, 1, 0, 0, 0, 105, 1, 0, 0, 0, 97, 1, 0, 0, 0, 110, 1, 0, 0, 0, 97, 1, 0, 0, 0, 44, 1, 0, 0, 0, 110, 1, 0, 0, 0, 44, 2, 0, 0, 0, 114, 1, 0, 0, 0, 44, 1, 0, 0, 0, 100, 1, 0, 0, 0, 110, 1, 0, 0, 0, 105, 1, 0, 0, 0, 116, 1, 0, 0, 0, 101, 1, 0, 0, 0, 109, 1, 0, 0, 0, 110, 1, 0, 0, 0, 116, 1, 0, 0, 0, 109, 3, 0, 0, 0, 116, 1, 0, 0, 0, 114, 1, 0, 0, 0, 97, 1, 0, 0, 0, 109, 2, 0, 0, 0, 32, 1, 0, 0, 0, 46, 1, 0, 0, 0, 32, 1, 0, 0, 0, 110, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 108, 1, 0, 0, 0, 112, 1, 0, 0, 0, 117, 3, 0, 0, 0, 108, 2, 0, 0, 0, 32, 1, 0, 0, 0, 99, 1, 0, 0, 0, 109, 2, 0, 0, 0, 32, 1, 0, 0, 0, 105, 1, 0, 0, 0, 108, 2, 0, 0, 0, 32, 1, 0, 0, 0, 112, 1, 0, 0, 0, 99, 1, 0, 0, 0, 116, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 100, 2, 0, 0, 0, 116, 1, 0, 0, 0, 105, 1, 0, 0, 0, 32, 3, 0, 0, 0, 97, 1, 0, 0, 0, 99, 1, 0, 0, 0, 101, 1, 0, 0, 0, 111, 1, 0, 0, 0, 120, 1, 0, 0, 0, 105, 1, 0, 0, 0, 110, 1, 0, 0, 0, 32, 1, 0, 0, 0, 115, 1, 0, 0, 0, 114, 1, 0, 0, 0, 109, 3, 0, 0, 0, 32, 1, 0, 0, 0, 101, 2, 0, 0, 0, 32, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 97, 1, 0, 0, 0, 111, 2, 0, 0, 0, 105, 1, 0, 0, 0, 110, 1, 0, 0, 0, 32, 1, 0, 0, 0, 105, 1, 0, 0, 0, 97, 1, 0, 0, 0, 111, 5, 0, 0, 0, 32, 1, 0, 0, 0, 105, 1, 0, 0, 0, 115, 3, 0, 0, 0, 114, 1, 0, 0, 0, 116, 1, 0, 0, 0, 114, 1, 0, 0, 0, 116, 1, 0, 0, 0, 32, 1, 0, 0, 0, 97, 2, 0, 0, 0, 115, 1, 0, 0, 0, 114, 1, 0, 0, 0, 32, 1, 0, 0, 0, 118, 1, 0, 0, 0, 32, 1, 0, 0, 0, 114, 1, 0, 0, 0, 116, 1, 0, 0, 0, 104, 1, 0, 0, 0, 118, 1, 0, 0, 0, 32, 1, 0, 0, 0, 100, 1, 0, 0, 0, 114, 1, 0, 0, 0, 99, 1, 0, 0, 0, 115, 1, 0, 0, 0, 120, 1, 0, 0, 0, 100, 1, 0, 0, 0, 115, 1, 0, 0, 0, 100, 3, 0, 0, 0, 32, 1, 0, 0, 0, 109, 1, 0, 0, 0, 116, 1, 0, 0, 0, 32, 1, 0, 0, 0, 116, 2, 0, 0, 0, 32, 1, 0, 0, 0, 111, 1, 0, 0, 0, 102, 1, 0, 0, 0, 32, 1, 0, 0, 0, 110, 1, 0, 0, 0, 117, 1, 0, 0, 0, 97, 1, 0, 0, 0, 101, 1, 0, 0, 0, 117, 1, 0, 0, 0, 115, 1, 0, 0, 0, 99, 1, 0, 0, 0, 110, 1, 0, 0, 0, 103, 1, 0, 0, 0, 114, 1, 0, 0, 0, 102, 1, 0, 0, 0, 32, 1, 0, 0, 0, 112, 1, 0, 0, 0, 111, 1, 0, 0, 0, 99, 1, 0, 0, 0, 100, 1, 0, 0, 0, 99, 3, 0, 0, 0, 110, 4, 0, 0, 0, 32, 1, 0, 0, 0, 99, 1, 0, 0, 0, 109, 1, 0, 0, 0, 115, 1, 0, 0, 0, 116, 1, 0, 0, 0, 117, 1, 0, 0, 0, 100, 1, 0, 0, 0, 32, 2, 0, 0, 0, 108, 1, 0, 0, 0, 32, 1, 0, 0, 0, 117, 1, 0, 0, 0, 114, 1, 0, 0, 0, 117, 1, 0, 0, 0, 112, 1, 0, 0, 0, 110, 1, 0, 0, 0, 115, 2, 0, 0, 0, 108, 1, 0, 0, 0, 114, 1, 0, 0, 0, 108, 1, 0, 0, 0, 99, 1, 0, 0, 0, 101, 1, 0, 0, 0, 108, 3, 0, 0, 0, 32, 1, 0, 0, 0, 108, 2, 0, 0, 0, 97, 1, 0, 0, 0, 108, 2, 0, 0, 0, 101, 2, 0, 0, 0, 117, 1, 0, 0, 0, 111, 1, 0, 0, 0, 105, 4, 0, 0, 0, 111, 1, 0, 0, 0, 117, 1, 0, 0, 0, 108, 1, 0, 0, 0, 111, 1, 0, 0, 0, 105, 2, 0, 0, 0, 117, 1, 0, 0, 0, 105, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 97, 1, 0, 0, 0, 117, 1, 0, 0, 0, 32, 2, 0, 0, 0, 97, 1, 0, 0, 0, 32, 1, 0, 0, 0, 111, 1, 0, 0, 0, 115, 1, 0, 0, 0, 109, 1, 0, 0, 0, 32, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 111, 1, 0, 0, 0, 105, 1, 0, 0, 0, 111, 1, 0, 0, 0, 105, 1, 0, 0, 0, 103, 1, 0, 0, 0, 105, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 2, 0, 0, 0, 101, 1, 0, 0, 0, 97, 1, 0, 0, 0, 105, 3, 0, 0, 0, 32, 2, 0, 0, 0, 111, 2, 0, 0, 0, 117, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 101, 1, 0, 0, 0, 32, 2, 0, 0, 0, 100, 1, 0, 0, 0, 99, 1, 0, 0, 0, 32, 2, 0, 0, 0, 109, 1, 0, 0, 0, 32, 1, 0, 0, 0, 114, 1, 0, 0, 0, 109, 4, 0, 0, 0, 100, 1, 0, 0, 0, 118, 1, 0, 0, 0, 99, 1, 0, 0, 0, 110, 1, 0, 0, 0, 105, 2, 0, 0, 0, 99, 1, 0, 0, 0, 108, 1, 0, 0, 0, 112, 1, 0, 0, 0, 108, 1, 0, 0, 0, 98, 2, 0, 0, 0, 108, 1, 0, 0, 0, 76, 2, 0, 0, 0, 98, 1, 0, 0, 0, 110, 1, 0, 0, 0, 105, 1, 0, 0, 0, 108, 1, 0, 0, 0, 32, 1, 0, 0, 0, 117, 1, 0, 0, 0, 105, 1, 0, 0, 0, 109, 1, 0, 0, 0, 101, 1, 0, 0, 0, 32, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 101, 1, 0, 0, 0, 32, 1, 0, 0, 0, 105, 1, 0, 0, 0, 32, 1, 0, 0, 0, 117, 2, 0, 0, 0, 111, 1, 0, 0, 0, 117, 1, 0, 0, 0, 111, 1, 0, 0, 0, 117, 1, 0, 0, 0, 101, 1, 0, 0, 0, 117, 3, 0, 0, 0, 111, 1, 0, 0, 0, 112, 1, 0, 0, 0, 111, 1, 0, 0, 0, 32, 1, 0, 0, 0, 97, 1, 0, 0, 0, 111, 1, 0, 0, 0, 101, 1, 0, 0, 0, 112, 1, 0, 0, 0, 116, 1, 0, 0, 0, 111, 1, 0, 0, 0, 101, 5, 0, 0, 0, 105, 1, 0, 0, 0, 115, 1, 0, 0, 0, 110, 1, 0, 0, 0, 32, 1, 0, 0, 0, 110, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 2, 0, 0, 0, 32, 1, 0, 0, 0, 117, 2, 0, 0, 0, 101, 1, 0, 0, 0, 111, 1, 0, 0, 0, 112, 1, 0, 0, 0, 32, 1, 0, 0, 0, 117, 2, 0, 0, 0, 105, 1, 0, 0, 0, 97, 1, 0, 0, 0, 101, 1, 0, 0, 0, 85, 1, 0, 0, 0, 105, 1, 0, 0, 0, 110, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 115, 1, 0, 0, 0, 110, 2, 0, 0, 0, 97, 2, 0, 0, 0, 110, 1, 0, 0, 0, 101, 1, 0, 0, 0, 105, 1, 0, 0, 0, 110, 2, 0, 0, 0, 97, 1, 0, 0, 0, 112, 1, 0, 0, 0, 105, 1, 0, 0, 0, 117, 1, 0, 0, 0, 97, 1, 0, 0, 0, 32, 1, 0, 0, 0, 99, 1, 0, 0, 0, 112, 1, 0, 0, 0, 97, 1, 0, 0, 0, 115, 1, 0, 0, 0, 101, 1, 0, 0, 0, 97, 1, 0, 0, 0, 101, 2, 0, 0, 0, 113, 1, 0, 0, 0, 114, 1, 0, 0, 0, 102, 2, 0, 0, 0, 113, 1, 0, 0, 0, 68, 1, 0, 0, 0, 113, 1, 0, 0, 0, 110, 1, 0, 0, 0, 32, 1, 0, 0, 0, 99, 1, 0, 0, 0, 115, 1, 0, 0, 0, 108, 1, 0, 0, 0, 114, 1, 0, 0, 0, 115, 1, 0, 0, 0, 114, 1, 0, 0, 0, 100, 1, 0, 0, 0, 99, 1, 0, 0, 0, 108, 1, 0, 0, 0, 116, 1, 0, 0, 0, 101, 1, 0, 0, 0, 116, 1, 0, 0, 0, 114, 1, 0, 0, 0, 105, 2, 0, 0, 0, 32, 1, 0, 0, 0, 97, 3, 0, 0, 0, 32, 1, 0, 0, 0, 101, 1, 0, 0, 0, 69, 1, 0, 0, 0, 101 };

  private final RunLength runLength = new RunLength();

  @Test
  public void shouldEncodeProperlyBytes() {
    // given
    // do
    List<Byte> bytes1 = runLength.encode(INPUT_STRING_1.getBytes());
    List<Byte> bytes2 = runLength.encode(INPUT_STRING_2.getBytes());
    int bytesCount1 = runLength.getCompressedLengthOf(INPUT_STRING_1.getBytes());
    int bytesCount2 = runLength.getCompressedLengthOf(INPUT_STRING_2.getBytes());

    // then
    Assert.assertArrayEquals(ENCODED_BYTES_1, getByteArrayFromList(bytes1));
    Assert.assertArrayEquals(ENCODED_BYTES_2, getByteArrayFromList(bytes2));
    Assert.assertEquals(ENCODED_BYTES_1.length, bytesCount1);
    Assert.assertEquals(ENCODED_BYTES_2.length, bytesCount2);
  }

  private byte[] getByteArrayFromList(List<Byte> bytes) {
    byte[] output = new byte[bytes.size()];
    for (int i = 0; i < bytes.size(); i++) {
      output[i] = bytes.get(i);
    }
    return output;
  }
}
